1. Install Django REST Framework (pip install djangorestframework)
2. Create the application "apidecc" (python manage.py startapp apidecc)
3. Add "apidecc" and "rest_framework" in INSTALLED APPS in setings.py of the project 
4. Create the models (+makemigrations +migrate)
5.Create the endpoints
    a. Create serializers.py (to transform the models into JSON)
    b. Create api.py (to generate the ViewSets)
    c. Create urls.py (to create the routes that the customer can consult)
    d. Include apidecc.urls in the urlpatterns of the project

Upload CSV data
(for each Model)
6. Through the "action" decorator, create the endpoint "upload_data" in api.py
    a. The file is first stored and then read to populate the data.
    b. Create a ContentFile object with the file contents
    c. Gets the path to the temporary file
    d. Open the CSV file
    e. Read data from each row of the CSV file
    f. Creates instances in the database using bulk_create

Endpoints:
- To upload CSV data:
http://darianyane.com/apidecc/api/jobs/upload_data/
http://darianyane.com/apidecc/api/departments/upload_data/
http://darianyane.com/apidecc/api/hired-employees/upload_data/

**********TODO: Explain SQL searches************

The SQL code equivalent to the 'get_employee_data_by_quarter' function in the context of the apidecc_hiredemployee table is as follows:

SELECT
    apidecc_hiredemployee.department,
    apidecc_hiredemployee.job,
    EXTRACT(QUARTER FROM apidecc_hiredemployee.datetime) AS quarter,
    COUNT(apidecc_hiredemployee.id) AS count
FROM
    apidecc_hiredemployee
GROUP BY
    apidecc_hiredemployee.department,
    apidecc_hiredemployee.job,
    quarter
ORDER BY
    apidecc_hiredemployee.department,
    apidecc_hiredemployee.job;

Explanation:
This SQL code queries the apidecc_hiredemployee table and performs the same grouping and counting operations as the original function. The result will include the columns department, job, quarter (extracted from the datetime field), and count. The data will be sorted by department and job in ascending order.