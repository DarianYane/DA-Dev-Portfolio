1. Install Django REST Framework (pip install djangorestframework)
2. Create the application "apidecc" (python manage.py startapp apidecc)
3. Add "apidecc" and "rest_framework" in INSTALLED APPS in setings.py of the project 
4. Create the models (+makemigrations +migrate)
5.Create the endpoints
    a. Create serializers.py (to transform the models into JSON)
    b. Create api.py (to generate the ViewSets)
    c. Create urls.py (to create the routes that the customer can consult)
    d. Include apidecc.urls in the urlpatterns of the project

Upload CSV data
(for each Model)
6. Through the "action" decorator, create the endpoint "upload_data" in api.py
    a. The file is first stored and then read to populate the data.
    b. Create a ContentFile object with the file contents
    c. Gets the path to the temporary file
    d. Open the CSV file
    e. Read data from each row of the CSV file
    f. Creates instances in the database using bulk_create

Endpoints:
- To upload CSV data:
http://darianyane.com/apidecc/api/jobs/upload_data/
http://darianyane.com/apidecc/api/departments/upload_data/
http://darianyane.com/apidecc/api/hired-employees/upload_data/

- To GET the number of employees hired for each department and job, divided by quarter, and ordered alphabetically by department and job:
    - in table format:
    http://darianyane.com/apidecc/api/hired-employees/employees_by_job_department_quarter_on_table/
    - in API format:
    http://darianyane.com/apidecc/api/hired-employees/employees_by_job_department_quarter_json/?format=api
    - in JSON format:
    http://darianyane.com/apidecc/api/hired-employees/employees_by_job_department_quarter_json/?format=json

The SQL code equivalent to the 'get_employee_data_by_quarter' function is as follows:

SELECT
    apidecc_hiredemployee.department,
    apidecc_hiredemployee.job,
    EXTRACT(QUARTER FROM apidecc_hiredemployee.datetime) AS quarter,
    COUNT(apidecc_hiredemployee.id) AS count
FROM
    apidecc_hiredemployee
GROUP BY
    apidecc_hiredemployee.department,
    apidecc_hiredemployee.job,
    quarter
ORDER BY
    apidecc_hiredemployee.department,
    apidecc_hiredemployee.job;

Explanation:
This SQL code queries the apidecc_hiredemployee table and performs the same grouping and counting operations as the original function. The result will include the columns department, job, quarter (extracted from the datetime field), and count. The data will be sorted by department and job in ascending order.

- To GET the list of ids, name and number of employees hired of each department that hired more employees than the mean of employees hired for all the departments, ordered by the number of employees hired (descending).
    - in table format:
    http://darianyane.com/apidecc/api/departments/departments_hiring_above_mean_on_table/?format=api
    - in API format:
    http://darianyane.com/apidecc/api/departments/departments_hiring_above_mean_json/?format=api
    - in JSON format:
    http://darianyane.com/apidecc/api/departments/departments_hiring_above_mean_json/?format=json



The SQL code equivalent to the 'departments_hiring_above_mean' function is as follows:

SELECT 
    d.id, 
    d.department, 
    COUNT(he.id) as num_hires
FROM 
    apidecc_department d
INNER JOIN 
    apidecc_hiredemployee he ON d.id = he.department_id
WHERE 
    he.datetime >= '2021-01-01' AND he.datetime < '2022-01-01'
GROUP BY 
    d.id, d.department
HAVING COUNT(he.id) > (
    SELECT AVG(num_hires) as mean_hires
    FROM (
        SELECT COUNT(id) as num_hires
        FROM apidecc_hiredemployee
        WHERE datetime >= '2021-01-01' AND datetime < '2022-01-01'
        GROUP BY department_id
    ) as subquery
)
ORDER BY num_hires DESC

Explanation:
This SQL code retrieves data from two tables, apidecc_department and apidecc_hiredemployee, and applies some filters and aggregations to get the desired result:
- SELECT d.id, d.department, COUNT(he.id) as num_hires: This selects the id and department columns from the apidecc_department table and the count of id column from the apidecc_hiredemployee table, and aliases it as num_hires.
- FROM apidecc_department d INNER JOIN apidecc_hiredemployee he ON d.id = he.department_id: This specifies the tables being used and joins them based on the id in the apidecc_department table and department_id in the apidecc_hiredemployee table.
- WHERE he.datetime >= '2021-01-01' AND he.datetime < '2022-01-01': This sets the condition for the datetime column in the apidecc_hiredemployee table to be within the specified date range.
- GROUP BY d.id, d.department: This groups the result by the id and department columns from the apidecc_department table.
- HAVING COUNT(he.id) > (SELECT AVG(num_hires) as mean_hires FROM (SELECT COUNT(id) as num_hires FROM apidecc_hiredemployee WHERE datetime >= '2021-01-01' AND datetime < '2022-01-01' GROUP BY department_id) as subquery): This filters the grouped result by only including rows where the count of id column from the apidecc_hiredemployee table is greater than the average count of num_hires calculated in the subquery.
- ORDER BY num_hires DESC: This sorts the result in descending order based on the num_hires column.